# RES-2020-Labo-HTTPInfra

## Etape 1
Pour cette premiere étape nous devons suivre les instructions données dans le webcast. 
Les objectifs sont de créer (ou fork) un repo github afin d'y mettre le projet, d'installer un serveur httpd apache sur un conteneur Dock et d'y faire tourner un site web.

Afin de se faire nous utilisons comme montrer dans le webcast une image apache venant de Docker Hub.
Le Docker file est configurer comme suit, le "COPY" servant à utiliser les fichiers dedier au site web en local.

``` 
FROM php:7.0-apache
COPY src/ /var/www/html/
```

Nous faison des tests en ajoutant un simple fichier index.html afin de verifier le bon fonctionnement du conteneur. Celui-ci est build et lancer apres chaques modification grâce aux commandes 

```
bash
docker build -t res/apache-php .
docker run -d -p 9090:80 res/apache_php
```

une fois tout fonctionnel nous utilisons un template pris sur bootstrap afin de rendre le site plus attrayant.

## Etape 2

L'objectif de cette partie est de créer un application web en suivant les directives du webcast, mais sans pour autant y copier.
Un conteneur utilisant node.js est donc créé grace au dockerfile suivant.

``` 
FROM node:12.16

Copy src /opt/app

CMD ["node", "/opt/app/index.js"]
```

Nous fixons l'entry point dans "index.js", et c'est donc la que notre code JS est placé.
Nous faison dabord un test du bon fonctionnement de notre code grace au module "chance" qui nous retourne des noms aléatoire, puis faisons une fonction grâce au module "express" qui retourne 15 fausses destinations pour vos prochaines vacances

```
function nextTrip(){

	var trips = [];
	
	for(var i = 0; i < 15; ++i){
		trips.push({
            
            'country' : chance.country({ full: true }),
            'adress'    : chance.address(),
            'altitude' : chance.altitude({ max: 1000 }),
            'coordinate' : chance.coordinates(),
		});
	}
	console.log(trips);
	return trips;
}
```

Pour build et lancer des conteneurs avec l'image  docker contenant node js nous utilisont les même commande que dans l'étape précédente mais avec "res/express_student"

```
bash
docker build -t res/express_student .
docker run -d -p 9090:9090 res/express_student
```

Nous avons décider d'utiliser le port 9090 car une autre àpplication utilise deja le port 3000

